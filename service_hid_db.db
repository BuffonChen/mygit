/*******************************************************************************
 *    Copyright (C) Cambridge Silicon Radio Limited 2016
 *
 * FILE
 *    service_hid_db.db
 *
 *  DESCRIPTION
 *    This file defines (using JSON) the HID Service for this remote control.
 *
 * == THIS FILE IS AUTO-GENERATED BY THE REMOTE CONTROL GENERATOR APPLICATION. ==
 *    Any changes made here will be lost if the generator application is re-run.
 *
 *    This file was generated on 21/Oct/2016 at 01:29:49 (GMT),
 *    using app version v150223.6448.
 *
 ******************************************************************************/
#include "uuids_hid.h" 
#include "uuids_battery.h"
#include "configuration.h"

/* For details on the HID service, please refer to:
 * http://developer.bluetooth.org/gatt/services/Pages/ServiceViewer.aspx?u=org.bluetooth.service.human_interface_device.xml
 */

/* == This is the Primary service declaration of HID service. == */
primary_service {
    uuid : HID_SERVICE_UUID,    /* Defined in uuids_hid.h */
    name : "HID_SERVICE",       /* An identifier-string for this service */

    /* The Battery service is an included service here. */
    include {
        ref : "BATTERY_SERVICE"
    },

    /* HID Information characteristic. */
    characteristic {
        uuid : HID_INFORMATION_UUID,
        flags : [FLAG_ENCR_R],
        properties : read,
        value : [HID_FLAG_CLASS_SPEC_RELEASE, HID_FLAG_COUNTRY_CODE, HID_INFO_FLAGS]
    },

    /* Report map (report descriptor) characteristic. */
    characteristic {
    uuid : HID_REPORT_MAP_UUID, /* Defined in uuids_hid.h */
    name : "HID_REPORT_MAP",
    properties : read,
    flags : [FLAG_IRQ, FLAG_ENCR_R],      /* Insist on being paired before allowing access to this descriptor */
    size_value : 1,
         raw {
            value: [0xe002, HID_EXT_REPORT_REFERENCE_UUID, 0x0002, 
            BATTERY_LEVEL_UUID]
         }
    },


    /* Boot keyboard input report characteristic. */
    characteristic {
        uuid : HID_BOOT_KEYBOARD_INPUT_REPORT_UUID,
        name : "HID_BOOT_KEYBOARD_INPUT_REPORT",
        flags : [FLAG_ENCR_R],
        properties : [read, notify],
        /* Boot mode keyboard input report size is fixed to be 8 bytes by
         * HID USB standards.
         */
        size_value : 8
    },

    /* Boot keyboard output report characteristic. */
    characteristic {
        uuid : HID_BOOT_KEYBOARD_OUTPUT_REPORT_UUID,
        name : "HID_BOOT_KEYBOARD_OUTPUT_REPORT",
        flags : [FLAG_ENCR_R, FLAG_ENCR_W],
        properties : [read, write, write_cmd],
        /* Boot mode keyboard output report size is fixed to be 1 byte by
         * HID USB standards.
         */
        size_value : 1
    },

    /* Boot mouse input report characteristic. */
    characteristic {
        uuid : HID_BOOT_MOUSE_INPUT_REPORT_UUID,
        name : "HID_BOOT_MOUSE_INPUT_REPORT",
        flags : [FLAG_ENCR_R],
        properties : [read, notify],
        /* Boot mode mouse input report size is fixed to be 3 bytes by
         * HID USB standards. If a report of larger size is received, the
         * host will consider only the first 3 bytes.
         */
        size_value : 3
    },

    /* Input report characteristic for consumer key-press information. */
    characteristic {
        uuid : HID_REPORT_UUID,
        name : "HID_CONSUMER_REPORT",
        flags : [FLAG_IRQ, FLAG_ENCR_R],
        properties : [read, notify],
        /* Structure of this report (Report ID 1) 
         * Bytes 0-1 - key-press information
         */                  
        
        size_value : 2,
        
        client_config {
            flags : [FLAG_IRQ, FLAG_ENCR_W],
            name : "HID_CONSUMER_REPORT_CLIENT_CONFIG"
            },
            
        raw {
          /* In 0xe002, 'e' (most significant four bits) stands as identifier to
           * identify attributes like HID Report reference descriptor (Generic Attribute),
           * The next four bits (0 here) identify the flags for this attribute.
           * Flags:
           * 0x0 - Unsecure (can be written to over an unencrypted link)
           * 0x1 - Encryption protected for write operations.
           * 0x2 - Authentication protected (MITM protection) for write operations.
           * 0x3 - reserved.
           * The next byte (02 here) represents the length of the 'value' field in octets, after 
           * the Generic Attribute short UUID(1 word) and permission(1 word) fields.
           * Please note that this is not the same as the characteristic's value_size field.
           */
          /* 'properties' or 'permission' field is a bit-field.
           * Broadcast               - 0x01 permits broadcasts 
           * Read                    - 0x02 permits reads 
           * Write Without Response  - 0x04 permits writes without response 
           * Write                   - 0x08 permits writes 
           * Notify                  - 0x10 permits notifications
           * Indicate                - 0x20 permits indications
           * Auth'd Signed Writes    - 0x40 permits signed writes
           * Extended Properties     - 0x80 additional characteristic properties are defined
           */
        value: [0xe002, HID_REPORT_REFERENCE_UUID, 0x0002, 0x0101] /* Report ID - 1,
                                                                    * Report Type - 1 (Input)
                                                                    */
        }
    },

    /* HID control point characteristic. */
    characteristic {
        uuid : HID_CONTROL_POINT_UUID,
        name : "HID_CONTROL_POINT",
        flags : [FLAG_IRQ, FLAG_ENCR_W],
        properties : write_cmd,
        value : 0x00
    },

    /* Protocol mode characteristic. */
    characteristic {
        uuid : HID_PROTOCOL_MODE_UUID,
        name : "HID_PROTOCOL_MODE",
        flags : [FLAG_ENCR_R, FLAG_ENCR_W],
        properties : [read, write_cmd],
        value : 0x00
    }
},
